{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 9 -- IS602 -- Jim Hamski"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reading in the dataset I used the 'delim_whitespace' function argument - which smart enough to handle the quotes!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "column_names = [\"Host\", \"Date\", \"Request\", \"Reply\", \"Bytes\"]\n",
    "df = pd.read_csv('data.txt',  delim_whitespace=True, header=None, names=column_names, engine='c')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Host</th>\n",
       "      <th>Date</th>\n",
       "      <th>Request</th>\n",
       "      <th>Reply</th>\n",
       "      <th>Bytes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>141.243.1.172</td>\n",
       "      <td>[29:23:53:25]</td>\n",
       "      <td>GET /Software.html HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>query2.lycos.cs.cmu.edu</td>\n",
       "      <td>[29:23:53:36]</td>\n",
       "      <td>GET /Consumer.html HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tanuki.twics.com</td>\n",
       "      <td>[29:23:53:53]</td>\n",
       "      <td>GET /News.html HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>wpbfl2-45.gate.net</td>\n",
       "      <td>[29:23:54:15]</td>\n",
       "      <td>GET / HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>4889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>wpbfl2-45.gate.net</td>\n",
       "      <td>[29:23:54:16]</td>\n",
       "      <td>GET /icons/circle_logo_small.gif HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>2624</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Host           Date  \\\n",
       "0            141.243.1.172  [29:23:53:25]   \n",
       "1  query2.lycos.cs.cmu.edu  [29:23:53:36]   \n",
       "2         tanuki.twics.com  [29:23:53:53]   \n",
       "3       wpbfl2-45.gate.net  [29:23:54:15]   \n",
       "4       wpbfl2-45.gate.net  [29:23:54:16]   \n",
       "\n",
       "                                     Request Reply Bytes  \n",
       "0                GET /Software.html HTTP/1.0   200  1497  \n",
       "1                GET /Consumer.html HTTP/1.0   200  1325  \n",
       "2                    GET /News.html HTTP/1.0   200  1014  \n",
       "3                             GET / HTTP/1.0   200  4889  \n",
       "4  GET /icons/circle_logo_small.gif HTTP/1.0   200  2624  "
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df['Bytes'] = pd.to_numeric(df['Bytes'], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0   1900-01-29 23:53:25\n",
      "1   1900-01-29 23:53:36\n",
      "2   1900-01-29 23:53:53\n",
      "3   1900-01-29 23:54:15\n",
      "4   1900-01-29 23:54:16\n",
      "Name: Date, dtype: datetime64[ns]\n"
     ]
    }
   ],
   "source": [
    "df['Date'] = df['Date'].map(lambda x: str(x)[1:-1])\n",
    "df['Date'] = pd.to_datetime(df['Date'], errors='coerce', format='%d:%H:%M:%S')\n",
    "print df['Date'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Host               object\n",
      "Date       datetime64[ns]\n",
      "Request            object\n",
      "Reply              object\n",
      "Bytes             float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Which hostname or IP address made the most requests?*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sandy.rtptok1.epa.gov    294\n",
      "Name: Host, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "host_series = df.ix[:,0]\n",
    "print host_series.value_counts().head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Which hostname or IP address received the most total bytes from the server? How many bytes did it receive?*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Bytes\n",
      "Host                            \n",
      "piankhi.cs.hamptonu.edu  7267751\n"
     ]
    }
   ],
   "source": [
    "df_BytesRecieved = df.loc[:,['Host','Bytes']].groupby('Host').sum().sort_values('Bytes', ascending=False).head(1)\n",
    "print df_BytesRecieved"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*During what hour was the server the busiest in terms of requests?  (You can do this by grouping each hour period e.g. 13:00 â€“ 14:00. Then count the number of requests in each hour)*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reference: http://stackoverflow.com/questions/16266019/python-pandas-group-datetime-column-into-hour-and-minute-aggregations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Host  Date  Request  Reply  Bytes\n",
      "14 27   158   158      158    158    153\n"
     ]
    }
   ],
   "source": [
    "\n",
    "times = pd.DatetimeIndex(df.Date)\n",
    "print df.groupby([times.hour, times.minute]).count().sort_values(by='Request',ascending=False).head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Which .gif image was downloaded the most during the day?*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                     Host  Date  Reply  Bytes\n",
      "Request                                      \n",
      "GET /icons/book.gif     4     4      4      4\n"
     ]
    }
   ],
   "source": [
    "df_gif = df.loc[df.Request.str.endswith('gif')]\n",
    "\n",
    "print df_gif.groupby('Request').count().sort_values(by='Host',ascending=False).head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*What HTTP reply codes were sent other than 200?*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['200' '302' '304' '404' '403' '501' 'HTTP/1.0\"' '500' '400']\n"
     ]
    }
   ],
   "source": [
    "print df['Reply'].unique()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
